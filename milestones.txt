- display interface
- buy item
- keyboard shortcuts
- state -> branch -> state
- attack + ui update
- run record
- sequence of 1 shop, 3 mobs
- add a condition to every action
- filter actions to possible
- record states as series of actions
- visualise branches
- clearer run keys
- adding all the content from the base game
- heuristic score for exploring-first
- node version of the game
- change takeActionByNumber
- new architecture: gamestate as parameter, independent functions
- separate action from game state
- chunk-based exploration, store fringe
- centralised storage
- hashing storage
- turn counter based records
- profiler says shiftUnexplored take most time. optimise it.
- store non-upcoming pool
- idea: store sequence of actions to reach a state, recalculate states instead of storing - inefficient
- split data into uniq and aux
- monte carlo simulation
- test and adjust simulation
- modular structure, imports
- registering explored or final states

----

- metrics for a good exploration - clustering? density of solutions?
- alternatives to Monte Carlo - needle in haystack problems, high branching
- check overlapping of states and length
- visualising space
- pachinko-space, propagating from overlaps
- both for seeDeeply
- sigmoid function for variables
- state flattener
- policy vs value networks
- data mining the simulations
- tree -> attrs -> stateData -> parents, children, values, dead, won, evaluated ; references to objects in the tree
x use a db
x store fringe by bucket as well as hashed explorations
x generalise splitting a pool into smaller pools
- create a task that either executes, or further fragments pool
- do we check individual states or dupe children?
- diff storing {hp: 50, damage: 5} -> {hp: 51, damage: 5} / {hp:+1, parent: X}
- take the last states added, explore to completion
- time;space hashing, for each increment of time, take a sub-sub-pool per zone and compare it to the zone hash
- pull up relevant hash records for upcoming pool
- abort exploring dead/won states
- equivalence tables - what would we do with the full data?
- bucket based exploration, store elements by zone and turn
- won and dead are redundant, using both last zone and hp and such
- remove conditions from action execution
- takeActionByNumber is bloated
- store states every X states, store others as calculations of previous wave
- problem: priority mode is odd to switch to and it has much faster calculations
- problem: large hash records slow down processing time
- bucketed priority queue: {10: [1, 2, 3], 5:[5, 4]}, [[10, 3], [5, 2]]
- a few hinted runs
- disable priority queue, profile time/space
- enemy name and emoji
- UI
- recording & undo key
- gradually running a run
- single place for monsters, actions and shops?

- rss increasing, maybe store in file? check file?
- ensure the dupe elimination works - why 14% collision on turn off vs 99.9% on on, are they truly unique
- store only transitions
- merging branches, multiple parents and children
- wavefunction collapse - solvable levels vs full maps

## warn
main > generateActions, odd condition for no actions